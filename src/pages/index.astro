---
import Layout from "../layouts/Layout.astro"
---

<Layout>
    <div class="mx-auto max-w-7xl py-6 sm:px-6 lg:px-8">
        <div class="w-full bg-white rounded-xl shadow-lg p-6 md:p-8">
            <header class="text-center mb-6">
                <h1 class="text-3xl md:text-4xl font-bold text-gray-800">Seattle Pet Registrations</h1>
                <p class="mt-2 text-md text-gray-600">Search through the database of Seattle pet registrations, by any column in the parquet file.</p>
            </header>
            <main>
                <div id="parquet-container">
                    <div class="mb-4 flex items-center">
                        <select id="column-select" class="h-10 border-gray-300 border-r-0 border p-2 rounded-l-md focus:ring-blue-500 focus:border-blue-500"></select>
                        <input type="text" id="search-input" class="h-10 block w-full border-gray-300 border p-2 focus:ring-blue-500 focus:border-blue-500" placeholder="Search..." />
                        <button id="search-button" class="h-10 bg-blue-500 text-white p-2 rounded-r-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50">
                            Search
                        </button>
                    </div>

                    <div class="overflow-x-auto relative shadow-md sm:rounded-lg">
                        <div id="spinner" class="absolute inset-0 bg-white bg-opacity-75 flex items-center justify-center hidden">
                            <div class="spinner-border animate-spin inline-block w-8 h-8 border-4 rounded-full" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                        <table id="data-table" class="w-full text-sm text-left text-gray-500">
                            <thead id="table-head" class="text-xs text-gray-700 uppercase bg-gray-50">
                                </thead>
                            <tbody id="table-body">
                                </tbody>
                        </table>
                    </div>
                </div>
            </main>
        </div>
    </div>
</Layout>

<style>
    .spinner-border {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #3498db;
    }
    .visually-hidden {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border-width: 0;
    }
</style>

<script>
    import * as duckdb from '@duckdb/duckdb-wasm';

    const PARQUET_URL = 'https://pub-e8c2549a621b4395b169873f5aec1b37.r2.dev/seattle_pet_licenses.parquet';

    const COLUMN_MAP = {
        'license_issue_date': 'Issue Date',
        'license_number': 'Number',
        'animal_name': 'Name',
        'species': 'Species',
        'primary_breed': 'Primary Breed',
        'secondary_breed': 'Secondary Breed',
        'zip_code': 'ZIP Code'
    }

    const searchInput = document.getElementById('search-input');
    const searchButton = document.getElementById('search-button');
    const columnSelect = document.getElementById('column-select');
    const tableHead = document.getElementById('table-head');
    const tableBody = document.getElementById('table-body');
    const spinner = document.getElementById('spinner');

    let db: any; // Keep the database instance in a broader scope

    // Custom replacer function to handle BigInt
    const replacer = (key: any, value: any) => typeof value === 'bigint' ? value.toString() : value;

    // --- Function to populate the column dropdown ---
    function populateColumnSelect(headers) {
        columnSelect.innerHTML = '';
        headers.forEach(header => {
            const option = document.createElement('option');
            option.value = header;
            // Use the friendly name for the text, or the raw name if not in the map
            option.textContent = COLUMN_MAP[header] || header;
            columnSelect.appendChild(option);
        });
    }

    // --- Function to render data into the table ---
    function renderTable(dataArray) {
        tableHead.innerHTML = '';
        tableBody.innerHTML = '';

        if (dataArray.length === 0) {
            tableBody.innerHTML = '<tr><td colspan="100%" class="text-center p-4">No results found.</td></tr>';
            return;
        }

        const headers = Object.keys(dataArray[0]);
        if (columnSelect.options.length === 0) {
            populateColumnSelect(headers);
        }

        const headerRow = document.createElement('tr');
        headers.forEach(headerText => {
            const th = document.createElement('th');
            th.scope = 'col';
            th.className = 'px-6 py-3';
            // Use the friendly name for the header, or the raw name if not in the map
            th.textContent = COLUMN_MAP[headerText] || headerText;
            headerRow.appendChild(th);
        });
        tableHead.appendChild(headerRow);

        dataArray.forEach(row => {
            const tr = document.createElement('tr');
            tr.className = 'bg-white border-b hover:bg-gray-50';
            headers.forEach(header => {
                const td = document.createElement('td');
                td.className = 'px-6 py-4';
                td.textContent = replacer(null, row[header]);
                tr.appendChild(td);
            });
            tableBody.appendChild(tr);
        });
    }

    // --- Function to query data ---
    async function queryData(searchTerm = '') {
        if (!db) return;
        spinner.classList.remove('hidden');

        setTimeout(async () => {
            try {
                const c = await db.connect();
                let query;
                const searchColumn = columnSelect.value;

                if (searchTerm && searchColumn) {
                    switch (searchColumn) {
                        case "license_issue_date":
                            query = `SELECT * FROM '${PARQUET_URL}' WHERE "${searchColumn}" ILIKE '%${searchTerm}%'`;
                            break;
                        case "license_number":
                            query = `SELECT * FROM '${PARQUET_URL}' WHERE "${searchColumn}" = '${searchTerm}'`;
                            break;
                        case "animal_name":
                            query = `SELECT * FROM '${PARQUET_URL}' WHERE "${searchColumn}" ILIKE '%${searchTerm}%'`;
                            break;
                        case "species":
                            query = `SELECT * FROM '${PARQUET_URL}' WHERE "${searchColumn}" ILIKE '%${searchTerm}%'`;
                            break;
                        case "primary_breed":
                            query = `SELECT * FROM '${PARQUET_URL}' WHERE "${searchColumn}" ILIKE '%${searchTerm}%'`;
                            break;
                        case "secondary_breed":
                            query = `SELECT * FROM '${PARQUET_URL}' WHERE "${searchColumn}" ILIKE '%${searchTerm}%'`;
                            break;
                        case "zip_code":
                            query = `SELECT * FROM '${PARQUET_URL}' WHERE "${searchColumn}" = '${searchTerm}'`;
                            break;
                    }
                } else {
                    query = `SELECT * FROM '${PARQUET_URL}'`;
                }

                const data = await c.query(query);
                await c.close();

                const dataArray = data.toArray().map((row) => row.toJSON());
                renderTable(dataArray);

            } catch (error) {
                console.error(error);
                tableBody.innerHTML = '<tr><td colspan="100%" class="text-center p-4 text-red-500">Error querying data.</td></tr>';
            } finally {
                spinner.classList.add('hidden');
            }
        }, 0);
    }

    // --- Initialize DuckDB and load initial data ---
    async function setup() {
        spinner.classList.remove('hidden');

        setTimeout(async () => {
            try {
                const JSDELIVR_BUNDLES = duckdb.getJsDelivrBundles();
                const bundle = await duckdb.selectBundle(JSDELIVR_BUNDLES);
                const worker_url = URL.createObjectURL(
                    new Blob([`importScripts("${bundle.mainWorker}");`], {
                        type: 'text/javascript',
                    })
                );

                const worker = new Worker(worker_url);
                const logger = new duckdb.ConsoleLogger();
                db = new duckdb.AsyncDuckDB(logger, worker);
                await db.instantiate(bundle.mainModule, bundle.pthreadWorker);
                URL.revokeObjectURL(worker_url);

                await queryData();

            } catch (error) {
                console.error(error);
                tableBody.innerHTML = '<tr><td colspan="100%" class="text-center p-4 text-red-500">Error initializing DuckDB.</td></tr>';
            } finally {
                spinner.classList.add('hidden');
            }
        }, 0);
    }

    // --- EVENT LISTENERS ---
    searchButton.addEventListener('click', () => {
        queryData(searchInput.value);
    });

    // --- Start the setup ---
    setup();
</script>
