---
import Layout from "../layouts/Layout.astro"
---

<Layout>
    <div class="mx-auto max-w-7xl py-6 sm:px-6 lg:px-8">
        <section class="bg-white dark:bg-gray-900">
            <div class="py-8 px-4 mx-auto max-w-screen-xl text-center lg:py-16">
                <h1 class="mb-4 text-4xl font-extrabold tracking-tight leading-none text-gray-900 md:text-5xl lg:text-6xl dark:text-white">Seattle Pet Registrations</h1>
                <p class="mb-8 text-lg font-normal text-gray-500 lg:text-xl sm:px-16 lg:px-48 dark:text-gray-400">Search through the database of Seattle pet registrations.</p>
            </div>
        </section>

        <div id="parquet-container">
            <div class="py-5">
                <div class="flex">
                    <select id="column-select" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"></select>
                    <div id="dropdown" class="z-10 hidden bg-white divide-y divide-gray-100 rounded-lg shadow-sm w-44 dark:bg-gray-700">
                        <ul class="py-2 text-sm text-gray-700 dark:text-gray-200" aria-labelledby="dropdown-button">
                        <li>
                            <a href="#" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Shopping</a>
                        </li>
                        <li>
                            <a href="#" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Images</a>
                        </li>
                        <li>
                            <a href="#" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">News</a>
                        </li>
                        <li>
                            <a href="#" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Finance</a>
                        </li>
                        </ul>
                    </div>
                    <div class="relative w-full">
                        <input type="search" id="search-input" class="block p-2.5 w-full z-20 text-sm text-gray-900 bg-gray-50 rounded-e-lg rounded-s-gray-100 rounded-s-2 border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:border-blue-500" placeholder="Search..." required />
                        <button id="search-button" class="absolute top-0 end-0 p-2.5 h-full text-sm font-medium text-white bg-blue-700 rounded-e-lg border border-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                            <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"/>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>

            <div class="relative overflow-x-auto">
                <table id="data-table" class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
                    <thead id="table-head" class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400"></thead>
                    <tbody id="table-body"></tbody>
                </table>
            </div>
        </div>
    </div>
</Layout>

<script>
    import * as duckdb from '@duckdb/duckdb-wasm';

    const PARQUET_URL = 'https://pub-e8c2549a621b4395b169873f5aec1b37.r2.dev/seattle_pet_licenses.parquet';

    const COLUMN_MAP = {
        'license_issue_date': 'Issue Date',
        'license_number': 'Number',
        'animal_name': 'Name',
        'species': 'Species',
        'primary_breed': 'Primary Breed',
        'secondary_breed': 'Secondary Breed',
        'zip_code': 'ZIP Code'
    }

    const searchInput = document.getElementById('search-input');
    const searchButton = document.getElementById('search-button');
    const columnSelect = document.getElementById('column-select');
    const tableHead = document.getElementById('table-head');
    const tableBody = document.getElementById('table-body');

    let db: any; // Keep the database instance in a broader scope

    // Custom replacer function to handle BigInt
    const replacer = (key: any, value: any) => typeof value === 'bigint' ? value.toString() : value;

    // --- Function to populate the column dropdown ---
    function populateColumnSelect(headers) {
        columnSelect.innerHTML = '';
        headers.forEach(header => {
            const option = document.createElement('option');
            option.value = header;
            // Use the friendly name for the text, or the raw name if not in the map
            option.textContent = COLUMN_MAP[header] || header;
            columnSelect.appendChild(option);
        });
    }

    // --- Function to render data into the table ---
    function renderTable(dataArray) {
        tableHead.innerHTML = '';
        tableBody.innerHTML = '';

        if (dataArray.length === 0) {
            tableBody.innerHTML = '<tr class="g-white border-b dark:bg-gray-800 dark:border-gray-700 border-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600"><td colspan="100%" class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">No results found.</td></tr>';
            return;
        }

        const headers = Object.keys(dataArray[0]);
        if (columnSelect.options.length === 0) {
            populateColumnSelect(headers);
        }

        const headerRow = document.createElement('tr');
        headers.forEach(headerText => {
            const th = document.createElement('th');
            th.scope = 'col';
            th.className = 'px-6 py-3';
            // Use the friendly name for the header, or the raw name if not in the map
            th.textContent = COLUMN_MAP[headerText] || headerText;
            headerRow.appendChild(th);
        });
        tableHead.appendChild(headerRow);

        dataArray.forEach(row => {
            const tr = document.createElement('tr');
            tr.className = 'g-white border-b dark:bg-gray-800 dark:border-gray-700 border-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600';
            headers.forEach(header => {
                const td = document.createElement('td');
                td.className = 'px-6 py-3';
                td.textContent = replacer(null, row[header]);
                tr.appendChild(td);
            });
            tableBody.appendChild(tr);
        });
    }

    // --- Function to query data ---
    async function queryData(searchTerm = '') {
        if (!db) return;

        setTimeout(async () => {
            try {
                const c = await db.connect();
                let query;
                const searchColumn = columnSelect.value;

                if (searchTerm && searchColumn) {
                    switch (searchColumn) {
                        case "license_issue_date":
                            query = `SELECT * FROM '${PARQUET_URL}' WHERE "${searchColumn}" ILIKE '%${searchTerm}%'`;
                            break;
                        case "license_number":
                            query = `SELECT * FROM '${PARQUET_URL}' WHERE "${searchColumn}" = '${searchTerm}'`;
                            break;
                        case "animal_name":
                            query = `SELECT * FROM '${PARQUET_URL}' WHERE "${searchColumn}" ILIKE '%${searchTerm}%'`;
                            break;
                        case "species":
                            query = `SELECT * FROM '${PARQUET_URL}' WHERE "${searchColumn}" ILIKE '%${searchTerm}%'`;
                            break;
                        case "primary_breed":
                            query = `SELECT * FROM '${PARQUET_URL}' WHERE "${searchColumn}" ILIKE '%${searchTerm}%'`;
                            break;
                        case "secondary_breed":
                            query = `SELECT * FROM '${PARQUET_URL}' WHERE "${searchColumn}" ILIKE '%${searchTerm}%'`;
                            break;
                        case "zip_code":
                            query = `SELECT * FROM '${PARQUET_URL}' WHERE "${searchColumn}" = '${searchTerm}'`;
                            break;
                    }
                } else {
                    query = `SELECT * FROM '${PARQUET_URL}'`;
                }

                const data = await c.query(query);
                await c.close();

                const dataArray = data.toArray().map((row) => row.toJSON());
                renderTable(dataArray);

            } catch (error) {
                console.error(error);
                tableBody.innerHTML = '<tr><td colspan="100%" class="text-center px-6 py-3 text-red-500">Error querying data.</td></tr>';
            }
        }, 0);
    }

    // --- Initialize DuckDB and load initial data ---
    async function setup() {
        setTimeout(async () => {
            try {
                const JSDELIVR_BUNDLES = duckdb.getJsDelivrBundles();
                const bundle = await duckdb.selectBundle(JSDELIVR_BUNDLES);
                const worker_url = URL.createObjectURL(
                    new Blob([`importScripts("${bundle.mainWorker}");`], {
                        type: 'text/javascript',
                    })
                );

                const worker = new Worker(worker_url);
                const logger = new duckdb.ConsoleLogger();
                db = new duckdb.AsyncDuckDB(logger, worker);
                await db.instantiate(bundle.mainModule, bundle.pthreadWorker);
                URL.revokeObjectURL(worker_url);

                await queryData();

            } catch (error) {
                console.error(error);
                tableBody.innerHTML = '<tr><td colspan="100%" class="text-center px-6 py-3 text-red-500">Error initializing DuckDB.</td></tr>';
            }
        }, 0);
    }

    // --- EVENT LISTENERS ---
    searchButton.addEventListener('click', () => {
        queryData(searchInput.value);
    });

    // --- Start the setup ---
    setup();
</script>
